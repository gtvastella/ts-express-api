name: Example deploy

on:
  push:
    branches:
      - deploy

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
      env:
        ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile . --push
      
    - name: Set Kubernetes ConfigMap
      run: |
        echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}" >> config.env
        echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> config.env
        echo "RABBITMQ_QUEUE=${{ secrets.RABBITMQ_QUEUE }}" >> config.env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> config.env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> config.env
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >>
        echo "MONGO_HOST=${{ secrets.MONGO_HOST }}" >> config.env
        echo "MONGO_PORT=${{ secrets.MONGO_PORT }}" >> config.env
        echo "MONGO_COLLECTION=${{ secrets.MONGO_COLLECTION }}" >> config.env

        
    - name: Configure kubectl
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        KUBECTL_NAMESPACE: ${{ vars.KUBECTL_NAMESPACE }}
      run: |
        kubectl config set-context --current --namespace=$KUBECTL_NAMESPACE
        kubectl create configmap ts-express-api-config--from-env-file=config.env --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl set image deployment/ts-express-api \
        ts-express-api=$ECR_REGISTRY/$ECR_REPOSITORY:latest
        kubectl rollout restart deployment/ts-express-api
        kubectl rollout status deployment/ts-express-api
